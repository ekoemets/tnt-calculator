{"version":3,"sources":["logo.svg","components/Cell.js","components/Row.js","components/RowHead.js","components/TableWrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","props","handleChange","event","console","log","target","value","row","id","className","type","onChange","this","Component","Row","map","cell","index","key","TableWrapper","onCalculate","state","rows","size","createCells","x","i","push","end","j","Table","RowHead","handleRowChange","Button","variant","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,uKCwB5BC,EArBf,kDAEI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGVC,aAAe,SAACC,GACZC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKN,MAAMO,IAAI,EAAKP,MAAMQ,IAAMN,EAAMG,OAAOC,MAC7CH,QAAQC,IAAI,EAAKJ,MAAMO,MAPT,EAFtB,qDAaQ,OACI,4BACA,2BAAOE,UAAU,GAAGC,KAAK,SAASC,SAAUC,KAAKX,oBAf7D,GAA0BY,aC0BXC,EAzBf,kDACI,WAAYd,GAAO,uCACTA,GAFd,iGASa,IAAD,OACJ,OACI,+BACA,4BACKY,KAAKZ,MAAMO,IAAIQ,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,IAAK,EAAKP,MAAMO,IAAKC,GAAIS,aAd/D,GAAyBJ,aCyBVC,EAzBf,kDACI,WAAYd,GAAO,uCACTA,GAFd,iGASa,IAAD,OACJ,OACI,+BACA,4BACI,mCACCY,KAAKZ,MAAMO,IAAIQ,KAAI,SAACC,EAAMC,GAAP,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAOV,IAAK,EAAKP,MAAMO,IAAKC,GAAIS,aAf/D,GAAyBJ,aCCZM,EAAb,kDACI,aAAc,IAAD,8BACT,gBAuBJC,YAAc,SAAClB,GACXC,QAAQC,IAAI,EAAKiB,MAAMC,OAvBvB,EAAKD,MAAQ,CACTE,KAAO,EACPD,KAAO,EAAKE,YAAY,IAJnB,EADjB,wDAUgBC,GAER,IADA,IAAIH,EAAO,GACHI,EAAG,EAAGA,EAAGD,EAAI,EAAGC,IAAI,CACxBJ,EAAKK,KAAK,IACV,IAAIC,EAAMH,EAAI,EACL,IAANC,IACCE,EAAMH,GAEV,IAAI,IAAII,EAAI,EAAGA,EAAID,EAAKC,IACpBP,EAAKI,GAAGC,KAAK,MAGrB,OAAOL,IAtBf,+BA+Ba,IAAD,OACJ,OACI,6BACA,kBAACQ,EAAA,EAAD,CAAOrB,UAAU,YACb,kBAACsB,EAAD,CAASb,IAAK,EAAGjB,aAAcW,KAAKoB,gBAAiBzB,IAAKK,KAAKS,MAAMC,KAAK,KACzEV,KAAKS,MAAMC,KAAKP,KAAI,SAACR,EAAKU,GACvB,GAAY,GAATA,EACH,OAAO,kBAAC,EAAD,CAAKC,IAAKD,EAAOhB,aAAc,EAAK+B,gBAAiBzB,IAAKA,QAMzE,kBAAC0B,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASvB,KAAKQ,aAAxC,kBA5CZ,GAAkCP,aCWnBuB,MAVf,WACE,OACE,yBAAK3B,UAAU,OACb,kBAAC,EAAD,QCGc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.5d1c1f65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class Cell extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleChange = (event) =>{\r\n        console.log(event.target.value);\r\n        this.props.row[this.props.id] = event.target.value;\r\n        console.log(this.props.row);\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <td>\r\n            <input className=\"\" type=\"number\" onChange={this.handleChange}/>\r\n            </td>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from \"./Cell\";\r\n\r\nexport class Row extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleCellChange(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <tbody>\r\n            <tr>\r\n                {this.props.row.map((cell, index) => (\r\n                    <Cell key={index} row={this.props.row} id={index}>\r\n\r\n                    </Cell>\r\n                ))}\r\n            </tr>\r\n            </tbody>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Cell from \"./Cell\";\r\n\r\nexport class Row extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleCellChange(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <thead>\r\n            <tr>\r\n                <th>X/Y</th>\r\n                {this.props.row.map((cell, index) => (\r\n                    <Cell key={index} row={this.props.row} id={index}>\r\n                        \r\n                    </Cell>\r\n                ))}\r\n            </tr>\r\n            </thead>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Row;","import React, { Component } from 'react';\r\nimport  {Table, Button} from 'react-bootstrap';\r\nimport Row from './Row';\r\nimport RowHead from './RowHead';\r\n\r\nexport class TableWrapper extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            size : 2,\r\n            rows : this.createCells(2)\r\n            \r\n        }\r\n    }\r\n\r\n    createCells(x){\r\n        let rows = [];\r\n        for(let i= 0; i< x + 1; i++){\r\n            rows.push([]);\r\n            let end = x + 1;\r\n            if(i === 0){\r\n                end = x;\r\n            }\r\n            for(let j = 0; j < end; j++){\r\n                rows[i].push(null);\r\n            }\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    onCalculate = (event) =>  {\r\n        console.log(this.state.rows)\r\n        \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <Table className=\"bordered\">\r\n                <RowHead key={0} handleChange={this.handleRowChange} row={this.state.rows[0]}></RowHead>\r\n                {this.state.rows.map((row, index) => {\r\n                    if(index != 0)\r\n                    return(<Row key={index} handleChange={this.handleRowChange} row={row}>\r\n                        </Row>)\r\n\r\n                })\r\n                }\r\n            </Table>\r\n            <Button variant=\"primary\" onClick={this.onCalculate}>Calculate</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Table, { TableWrapper } from './components/TableWrapper'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TableWrapper>\n\n      </TableWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}